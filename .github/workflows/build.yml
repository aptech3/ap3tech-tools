name: Build Desktop Apps

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build:
    env:
      # Expose secrets as env so we can reference them in step `if:` conditions
      MACOS_CERT_P12_BASE64: ${{ secrets.MACOS_CERT_P12_BASE64 }}
      MACOS_CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
      MACOS_SIGNING_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
      NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}
      NOTARIZE_TEAM_ID: ${{ secrets.NOTARIZE_TEAM_ID }}
      NOTARIZE_PASSWORD: ${{ secrets.NOTARIZE_PASSWORD }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ['3.11']
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies (build subset)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-build.txt
          pip install pyinstaller==6.5.0

      - name: Build (Windows)
        if: startsWith(matrix.os, 'windows')
        shell: bash
        run: |
          pyinstaller --noconfirm --clean --windowed --onefile --name "RSG-Recovery-Tools" --exclude-module PyQt6.QtBluetooth --exclude-module PyQt6.QtNfc --add-data "logo.png;." --add-data "merchant_db.sqlite;." main_app_pyqt.py
          ls -la dist

      - name: Build (macOS)
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          # Build a proper .app bundle (more reliable on macOS than onefile for PyQt6)
          pyinstaller \
            --noconfirm --clean --windowed \
            --name "RSG-Recovery-Tools" \
            --exclude-module PyQt6.QtBluetooth \
            --exclude-module PyQt6.QtNfc \
            --add-data "logo.png:." \
            --add-data "merchant_db.sqlite:." \
            main_app_pyqt.py
          ls -la dist
          # Zip the .app for artifact upload
          APP_PATH="dist/RSG-Recovery-Tools.app"
          if [ -d "$APP_PATH" ]; then
            ditto -c -k --sequesterRsrc --keepParent "$APP_PATH" dist/RSG-Recovery-Tools-macos.zip
          fi

      - name: Code sign .app (optional)
        if: startsWith(matrix.os, 'macos') && env.MACOS_CERT_P12_BASE64 != '' && env.MACOS_CERT_PASSWORD != '' && env.MACOS_SIGNING_IDENTITY != ''
        shell: bash
        run: |
          set -euo pipefail
          KEYCHAIN=build.keychain
          security create-keychain -p "" $KEYCHAIN
          security default-keychain -s $KEYCHAIN
          security unlock-keychain -p "" $KEYCHAIN
          security set-keychain-settings -lut 21600 $KEYCHAIN
          # Import certificate
          echo "$MACOS_CERT_P12_BASE64" | base64 --decode > cert.p12
          security import cert.p12 -k $KEYCHAIN -P "$MACOS_CERT_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
          security find-identity -v -p codesigning
          # Sign the .app with hardened runtime
          APP_PATH="dist/RSG-Recovery-Tools.app"
          codesign --deep --force --timestamp --options runtime --sign "$MACOS_SIGNING_IDENTITY" "$APP_PATH"
          codesign --verify --deep --strict --verbose=2 "$APP_PATH"

      - name: Create DMG
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          APP_PATH="dist/RSG-Recovery-Tools.app"
          DMG_PATH="dist/RSG-Recovery-Tools-macos.dmg"
          if [ -d "$APP_PATH" ]; then
            hdiutil create -volname "RSG Recovery Tools" -srcfolder "$APP_PATH" -fs HFS+ -format UDZO "$DMG_PATH"
            ls -la "$DMG_PATH"
          else
            echo "App not found: $APP_PATH" >&2
            exit 1
          fi

      - name: Notarize DMG (optional)
        if: startsWith(matrix.os, 'macos') && env.NOTARIZE_APPLE_ID != '' && env.NOTARIZE_TEAM_ID != '' && env.NOTARIZE_PASSWORD != ''
        shell: bash
        run: |
          set -euo pipefail
          DMG_PATH="dist/RSG-Recovery-Tools-macos.dmg"
          xcrun notarytool submit "$DMG_PATH" --apple-id "$NOTARIZE_APPLE_ID" --team-id "$NOTARIZE_TEAM_ID" --password "$NOTARIZE_PASSWORD" --wait
          # Staple the ticket to both the .app and the .dmg
          xcrun stapler staple "dist/RSG-Recovery-Tools.app" || true
          xcrun stapler staple "$DMG_PATH" || true

      - name: Upload artifact (Windows)
        if: startsWith(matrix.os, 'windows')
        uses: actions/upload-artifact@v4
        with:
          name: RSG-Recovery-Tools-windows
          path: dist/RSG-Recovery-Tools.exe
          if-no-files-found: error

      - name: Upload artifact (macOS)
        if: startsWith(matrix.os, 'macos')
        uses: actions/upload-artifact@v4
        with:
          name: RSG-Recovery-Tools-macos
          path: |
            dist/RSG-Recovery-Tools-macos.zip
            dist/RSG-Recovery-Tools-macos.dmg
          if-no-files-found: error
